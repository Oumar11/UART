
UART2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cd5  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f3  00000000  00000000  00001029  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ba3  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  000023c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006545  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004fb  00000000  00000000  00008a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00008f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002462  00000000  00000000  00008f84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	aa d0       	rcall	.+340    	; 0x1b6 <main>
  62:	ca c0       	rjmp	.+404    	; 0x1f8 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <lcd_cmnd>:
  66:	9b b3       	in	r25, 0x1b	; 27
  68:	9f 70       	andi	r25, 0x0F	; 15
  6a:	28 2f       	mov	r18, r24
  6c:	20 7f       	andi	r18, 0xF0	; 240
  6e:	92 2b       	or	r25, r18
  70:	9b bb       	out	0x1b, r25	; 27
  72:	d8 98       	cbi	0x1b, 0	; 27
  74:	d9 98       	cbi	0x1b, 1	; 27
  76:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	00 00       	nop
  7a:	da 98       	cbi	0x1b, 2	; 27
  7c:	36 e0       	ldi	r19, 0x06	; 6
  7e:	3a 95       	dec	r19
  80:	f1 f7       	brne	.-4      	; 0x7e <lcd_cmnd+0x18>
  82:	00 c0       	rjmp	.+0      	; 0x84 <lcd_cmnd+0x1e>
  84:	2b b3       	in	r18, 0x1b	; 27
  86:	2f 70       	andi	r18, 0x0F	; 15
  88:	30 e1       	ldi	r19, 0x10	; 16
  8a:	83 9f       	mul	r24, r19
  8c:	c0 01       	movw	r24, r0
  8e:	11 24       	eor	r1, r1
  90:	82 2b       	or	r24, r18
  92:	8b bb       	out	0x1b, r24	; 27
  94:	da 9a       	sbi	0x1b, 2	; 27
  96:	00 00       	nop
  98:	da 98       	cbi	0x1b, 2	; 27
  9a:	08 95       	ret

0000009c <lcd_data>:
  9c:	9b b3       	in	r25, 0x1b	; 27
  9e:	9f 70       	andi	r25, 0x0F	; 15
  a0:	28 2f       	mov	r18, r24
  a2:	20 7f       	andi	r18, 0xF0	; 240
  a4:	92 2b       	or	r25, r18
  a6:	9b bb       	out	0x1b, r25	; 27
  a8:	d8 9a       	sbi	0x1b, 0	; 27
  aa:	d9 98       	cbi	0x1b, 1	; 27
  ac:	da 9a       	sbi	0x1b, 2	; 27
  ae:	00 00       	nop
  b0:	da 98       	cbi	0x1b, 2	; 27
  b2:	36 e0       	ldi	r19, 0x06	; 6
  b4:	3a 95       	dec	r19
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_data+0x18>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_data+0x1e>
  ba:	2b b3       	in	r18, 0x1b	; 27
  bc:	2f 70       	andi	r18, 0x0F	; 15
  be:	30 e1       	ldi	r19, 0x10	; 16
  c0:	83 9f       	mul	r24, r19
  c2:	c0 01       	movw	r24, r0
  c4:	11 24       	eor	r1, r1
  c6:	82 2b       	or	r24, r18
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	da 9a       	sbi	0x1b, 2	; 27
  cc:	00 00       	nop
  ce:	da 98       	cbi	0x1b, 2	; 27
  d0:	08 95       	ret

000000d2 <lcd_intit>:
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	da 98       	cbi	0x1b, 2	; 27
  d8:	83 ef       	ldi	r24, 0xF3	; 243
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_intit+0xa>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_intit+0x10>
  e2:	00 00       	nop
  e4:	83 e3       	ldi	r24, 0x33	; 51
  e6:	bf df       	rcall	.-130    	; 0x66 <lcd_cmnd>
  e8:	91 e2       	ldi	r25, 0x21	; 33
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_intit+0x18>
  ee:	00 00       	nop
  f0:	82 e3       	ldi	r24, 0x32	; 50
  f2:	b9 df       	rcall	.-142    	; 0x66 <lcd_cmnd>
  f4:	81 e2       	ldi	r24, 0x21	; 33
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_intit+0x24>
  fa:	00 00       	nop
  fc:	88 e2       	ldi	r24, 0x28	; 40
  fe:	b3 df       	rcall	.-154    	; 0x66 <lcd_cmnd>
 100:	91 e2       	ldi	r25, 0x21	; 33
 102:	9a 95       	dec	r25
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_intit+0x30>
 106:	00 00       	nop
 108:	8e e0       	ldi	r24, 0x0E	; 14
 10a:	ad df       	rcall	.-166    	; 0x66 <lcd_cmnd>
 10c:	81 e2       	ldi	r24, 0x21	; 33
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <lcd_intit+0x3c>
 112:	00 00       	nop
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	a7 df       	rcall	.-178    	; 0x66 <lcd_cmnd>
 118:	91 e2       	ldi	r25, 0x21	; 33
 11a:	9a 95       	dec	r25
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_intit+0x48>
 11e:	00 00       	nop
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	a1 df       	rcall	.-190    	; 0x66 <lcd_cmnd>
 124:	81 e2       	ldi	r24, 0x21	; 33
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_intit+0x54>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <lcd_goto>:
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	00 d0       	rcall	.+0      	; 0x134 <lcd_goto+0x6>
 134:	00 d0       	rcall	.+0      	; 0x136 <lcd_goto+0x8>
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	90 e8       	ldi	r25, 0x80	; 128
 13c:	99 83       	std	Y+1, r25	; 0x01
 13e:	90 ec       	ldi	r25, 0xC0	; 192
 140:	9a 83       	std	Y+2, r25	; 0x02
 142:	94 e9       	ldi	r25, 0x94	; 148
 144:	9b 83       	std	Y+3, r25	; 0x03
 146:	94 ed       	ldi	r25, 0xD4	; 212
 148:	9c 83       	std	Y+4, r25	; 0x04
 14a:	fe 01       	movw	r30, r28
 14c:	e6 0f       	add	r30, r22
 14e:	f1 1d       	adc	r31, r1
 150:	81 50       	subi	r24, 0x01	; 1
 152:	90 81       	ld	r25, Z
 154:	89 0f       	add	r24, r25
 156:	87 df       	rcall	.-242    	; 0x66 <lcd_cmnd>
 158:	81 e2       	ldi	r24, 0x21	; 33
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_goto+0x2c>
 15e:	00 00       	nop
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <lcd_prnt>:
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	88 23       	and	r24, r24
 17a:	51 f0       	breq	.+20     	; 0x190 <lcd_prnt+0x22>
 17c:	8f 01       	movw	r16, r30
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	8d df       	rcall	.-230    	; 0x9c <lcd_data>
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	f8 01       	movw	r30, r16
 186:	ec 0f       	add	r30, r28
 188:	f1 1d       	adc	r31, r1
 18a:	80 81       	ld	r24, Z
 18c:	81 11       	cpse	r24, r1
 18e:	f8 cf       	rjmp	.-16     	; 0x180 <lcd_prnt+0x12>
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <UART_INIT>:
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	89 b9       	out	0x09, r24	; 9
 19c:	85 e4       	ldi	r24, 0x45	; 69
 19e:	80 bd       	out	0x20, r24	; 32
 1a0:	8a b1       	in	r24, 0x0a	; 10
 1a2:	88 61       	ori	r24, 0x18	; 24
 1a4:	8a b9       	out	0x0a, r24	; 10
 1a6:	80 b5       	in	r24, 0x20	; 32
 1a8:	86 60       	ori	r24, 0x06	; 6
 1aa:	80 bd       	out	0x20, r24	; 32
 1ac:	08 95       	ret

000001ae <uart_r>:
 1ae:	5f 9b       	sbis	0x0b, 7	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <uart_r>
 1b2:	8c b1       	in	r24, 0x0c	; 12
 1b4:	08 95       	ret

000001b6 <main>:
#include "LCD4.h"
#include "UART.h"
#include <stdlib.h>

int main(void)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	60 97       	sbiw	r28, 0x10	; 16
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
	lcd_intit();
 1ca:	83 df       	rcall	.-250    	; 0xd2 <lcd_intit>
	UART_INIT();
 1cc:	e5 df       	rcall	.-54     	; 0x198 <UART_INIT>
 1ce:	7e 01       	movw	r14, r28
 1d0:	81 e1       	ldi	r24, 0x11	; 17
 1d2:	e8 0e       	add	r14, r24
 1d4:	f1 1c       	adc	r15, r1
 1d6:	8e 01       	movw	r16, r28
 1d8:	0f 5f       	subi	r16, 0xFF	; 255
 1da:	1f 4f       	sbci	r17, 0xFF	; 255
	{	
		char arr[16];
		unsigned char i = 0 ;
		while (i<16)
		{
			arr[i++]=uart_r();
 1dc:	e8 df       	rcall	.-48     	; 0x1ae <uart_r>
 1de:	f8 01       	movw	r30, r16
 1e0:	81 93       	st	Z+, r24
 1e2:	8f 01       	movw	r16, r30
 1e4:	ee 15       	cp	r30, r14
	
	while (1)
	{	
		char arr[16];
		unsigned char i = 0 ;
		while (i<16)
 1e6:	ff 05       	cpc	r31, r15
 1e8:	c9 f7       	brne	.-14     	; 0x1dc <main+0x26>
		{
			arr[i++]=uart_r();
			
		}
		lcd_goto(1,1);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	9f df       	rcall	.-194    	; 0x12e <lcd_goto>
		lcd_prnt(arr);
 1f0:	ce 01       	movw	r24, r28
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	bc df       	rcall	.-136    	; 0x16e <lcd_prnt>
 1f6:	ef cf       	rjmp	.-34     	; 0x1d6 <main+0x20>

000001f8 <_exit>:
		
		
	}
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
